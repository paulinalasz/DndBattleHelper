<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <!-- TextBlock Style -->
    <Style TargetType="TextBlock">
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
    </Style>
    <Style TargetType="Run" x:Key="ActionName">
        <Setter Property="FontStyle" Value="Italic"/>
        <Setter Property="FontSize" Value="12"/>
    </Style>
    <Style TargetType="TextBlock" x:Key="Trait" BasedOn="{StaticResource {x:Type TextBlock}}">
        <Setter Property="Foreground" Value="{DynamicResource DndRed}"/>
        <!--<Setter Property="Foreground" Value="#58170d"/>-->
        <Setter Property="FontFamily" Value="Ariel"/>
        <Setter Property="Margin" Value="5"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>
    <Style TargetType="TextBlock" x:Key="TraitName" BasedOn="{StaticResource Trait}">
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="Margin" Value="5,0,5,0"/>
    </Style>
    <Style TargetType="TextBlock" x:Key="EditTraitName" BasedOn="{StaticResource TraitName}">
        <Setter Property="FontSize" Value="14"/>
    </Style>
    <Style TargetType="TextBlock" x:Key="EditTrait" BasedOn="{StaticResource TraitName}">
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="FontWeight" Value="DemiBold"/>
    </Style>
    <Style TargetType="TextBlock" x:Key="Name" BasedOn="{StaticResource TraitName}">
        <Setter Property="FontSize" Value="24"/>
    </Style>
    <Style TargetType="TextBlock" x:Key="EditName" BasedOn="{StaticResource TraitName}">
        <Setter Property="FontSize" Value="18"/>
    </Style>
    <Style TargetType="TextBlock" x:Key="AbilityScore" BasedOn="{StaticResource TraitName}">
        <Setter Property="FontSize" Value="14"/>
    </Style>

    <Style TargetType="TextBlock" x:Key="TabTitle">
        <Setter Property="Foreground" Value="{DynamicResource DndRed}"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="TextWrapping" Value="NoWrap"/>
    </Style>

    <Style TargetType="TextBlock" x:Key="Error" BasedOn="{StaticResource Trait}">
        <Setter Property="Foreground" Value="Red"/>
    </Style>
    
    <!--Run-->
    <Style TargetType="Run">
        <Setter Property="FontSize" Value="12"/>
    </Style>
    <Style TargetType="Run" x:Key="ActionNameRun">
        <Setter Property="FontStyle" Value="Italic"/>
        <Setter Property="FontSize" Value="12"/>
    </Style>
    <Style TargetType="Run" x:Key="TraitRun">
        <Setter Property="Foreground" Value="{DynamicResource DndRed}"/>
        <!--<Setter Property="Foreground" Value="#58170d"/>-->
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="FontFamily" Value="Ariel"/>
    </Style>
    <Style TargetType="Run" x:Key="TraitNameRun" BasedOn="{StaticResource TraitRun}">
        <Setter Property="FontWeight" Value="Bold"/>
    </Style>
    <Style TargetType="Run" x:Key="NameRun" BasedOn="{StaticResource TraitNameRun}">
        <Setter Property="FontSize" Value="16"/>
    </Style>
    <Style TargetType="Run" x:Key="AbilityScoreRun" BasedOn="{StaticResource TraitNameRun}">
        <Setter Property="FontSize" Value="14"/>
    </Style>

    <!--TextBox Styles-->
    <Style TargetType="TextBox">
        <Setter Property="MinWidth" Value="20"/>
        <Setter Property="MinHeight" Value="20"/>
        <Setter Property="Foreground" Value="{DynamicResource DndRed}"/>
        <Setter Property="FontWeight" Value="DemiBold"/>
        <Setter Property="TextAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border x:Name="bg" BorderBrush="#FF825E5E" Background="White" BorderThickness="1">
                        <ScrollViewer x:Name="PART_ContentHost" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="False">
                            <Setter Property="BorderBrush" TargetName="bg" Value="#858585"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" TargetName="bg" Value="{DynamicResource DndRed}"/>
                            <Setter Property="BorderThickness" TargetName="bg" Value="1"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="BorderBrush" TargetName="bg" Value="{DynamicResource DndRed}"/>
                            <Setter Property="BorderThickness" TargetName="bg" Value="1"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="#858585"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Resources>
            <Style TargetType="{x:Type Border}">
                <Setter Property="CornerRadius" Value="5" />
            </Style>
        </Style.Resources>
    </Style>

    <Style TargetType="TextBox" x:Key="Traits" BasedOn="{StaticResource {x:Type TextBox}}">
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="MinWidth" Value="30"/>
    </Style>
    
    <!--Path Separator-->
    <Style TargetType="Path">
        <Setter Property="Fill" Value="{DynamicResource DndRed}"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Margin" Value="0,5,0,5"/>
        <Setter Property="Data">
            <Setter.Value>
                <PathGeometry>
                    <PathFigure StartPoint="0,0">
                        <!-- Define a triangle-like shape -->
                        <LineSegment Point="350,3" />
                        <LineSegment Point="0,6" />
                        <LineSegment Point="0,6" />
                        <LineSegment Point="0,0" />
                    </PathFigure>
                </PathGeometry>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="NewEnemy" TargetType="Path">
        <Setter Property="Fill" Value="{DynamicResource DndRed}"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Margin" Value="0,5,0,5"/>
        <Setter Property="Data">
            <Setter.Value>
                <PathGeometry>
                    <PathFigure StartPoint="0,0">
                        <!-- Define a triangle-like shape -->
                        <LineSegment Point="400,3" />
                        <LineSegment Point="0,6" />
                        <LineSegment Point="0,6" />
                        <LineSegment Point="0,0" />
                    </PathFigure>
                </PathGeometry>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="Separator">
        <Setter Property="Background" Value="{DynamicResource DndRed}"/>
        <Setter Property="Height" Value="1"/>
    </Style>
    
    <!--Button Styles-->
    <Style TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource DndRed}"/>
        <Setter Property="BorderBrush" Value="Black"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="Margin" Value="2"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}" BorderBrush="Black" BorderThickness="1">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource HighlighterYellow}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="#8f6c68"/>
                <Setter Property="BorderBrush" Value="Gray"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <Style TargetType="Button" x:Key="ToolBar" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Width" Value="50"/>
        <Setter Property="Height" Value="50"/>
    </Style>
    <Style TargetType="Button" x:Key="Actions" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="MaxWidth" Value="40"/>
        <Setter Property="MaxHeight" Value="40"/>
        <Setter Property="Width" Value="40"/>
        <Setter Property="MinHeight" Value="40"/>
    </Style>
    <Style TargetType="Button" x:Key="OutputBox" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Width" Value="30"/>
        <Setter Property="Height" Value="30"/>
    </Style>

    <Style TargetType="Button" x:Key="AddRemove" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Width" Value="15"/>
        <Setter Property="MaxHeight" Value="15"/>
        <Setter Property="Padding" Value="2, 2, 2, 2"/>
    </Style>

    <Style TargetType="Button" x:Key="Confirm" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Width" Value="60"/>
        <Setter Property="Height" Value="30"/>
    </Style>

    <Style TargetType="Button" x:Key="Cancel" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Width" Value="80"/>
        <Setter Property="Height" Value="30"/>
    </Style>

    <!--Toggle Button-->
    <Style x:Key="ToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="{DynamicResource DndRed}"/>
        <Setter Property="BorderBrush" Value="Black"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="Margin" Value="2"/>
        <Setter Property="Width" Value="30"/>
        <Setter Property="Height" Value="30"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsDefaulted" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="black"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource HighlighterYellow}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="black"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource HighlighterYellow}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="black"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource HighlighterYellow}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="black"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="border" Value="black"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="black"/>
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="black"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

        <!--ComboBox Styles-->
    <Style TargetType="{x:Type ComboBox}">
        <Setter Property="Foreground" Value="{DynamicResource DndRed}"/>
        <Setter Property="FontWeight" Value="SemiBold"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBox">
                    <Grid>
                        <ToggleButton Grid.Column="2" Focusable="false" IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}" >
                            <ToggleButton.Template>
                                <ControlTemplate>
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="5*" />
                                            <ColumnDefinition Width="15" />
                                        </Grid.ColumnDefinitions>
                                        <Border x:Name="Border" Grid.ColumnSpan="2" CornerRadius="5" Background="{DynamicResource DndRed}" BorderBrush="#858585" BorderThickness="1" />
                                        <Border Grid.Column="0" CornerRadius="5,0,0,5"  Margin="1"  Background="White"  BorderBrush="#858585" BorderThickness="0,0,1,0" />
                                        <Path x:Name="Arrow" Grid.Column="1"  Fill="{DynamicResource HighlighterYellow}" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 0 0 L 4 4 L 8 0 Z"/>
                                    </Grid>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="ToggleButton.IsMouseOver" Value="true">
                                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource HighlighterYellow}" />
                                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DndRed}"/>
                                            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource DndRed}"/>
                                        </Trigger>
                                        <Trigger Property="ToggleButton.IsChecked" Value="true">
                                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource HighlighterYellow}" />
                                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DndRed}"/>
                                            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource DndRed}"/>
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </ToggleButton.Template>
                        </ToggleButton>
                        <ContentPresenter Name="ContentSite" IsHitTestVisible="False" Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" Margin="3"  />
                        <TextBox x:Name="PART_EditableTextBox" Visibility="Hidden" IsReadOnly="{TemplateBinding IsReadOnly}"/>
                        <Popup Name="Popup" Placement="Bottom" IsOpen="{TemplateBinding IsDropDownOpen}" AllowsTransparency="True"  Focusable="False" PopupAnimation="Slide">
                            <Grid Name="DropDown" SnapsToDevicePixels="True" MinWidth="{TemplateBinding ActualWidth}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                <Border x:Name="DropDownBorder" Background="White" CornerRadius="5"/>
                                <ScrollViewer SnapsToDevicePixels="True">
                                    <StackPanel IsItemsHost="True"/>
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Resources>
            <!-- ComboBoxItem Style -->
            <Style TargetType="{x:Type ComboBoxItem}">
                <Setter Property="Background" Value="White"/>
                <Setter Property="Foreground" Value="{DynamicResource DndRed}"/>
                <Setter Property="Padding" Value="4"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="ComboBoxItem">
                            <Border x:Name="Border" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}">
                                <ContentPresenter />
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="Border" Property="Background" Value="{DynamicResource DndRed}"/>
                                    <Setter Property="Foreground" Value="White"/>
                                    <Setter Property="FontWeight" Value="SemiBold"/>
                                </Trigger>
                                <Trigger Property="IsSelected" Value="True">
                                    <Setter TargetName="Border" Property="Background" Value="{DynamicResource DndRed}"/>
                                    <Setter Property="Foreground" Value="White"/>
                                    <Setter Property="FontWeight" Value="SemiBold"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </Style.Resources>
    </Style>

    <!--Image-->
    <Style TargetType="Image">
        <Setter Property="Margin" Value="1"/>
    </Style>
    
    <!--ScrollViewer-->
    <Style x:Key="ScrollBarPageButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="Visibility" Value="Visible" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Background="Transparent" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"></Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ScrollBarThumb" TargetType="{x:Type Thumb}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border
                        CornerRadius="3"
                        Background="{TemplateBinding Background}"
                        BorderThickness="0"
                        Width="6" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ScrollBarThumbHor" TargetType="{x:Type Thumb}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border
                        CornerRadius="3"
                        Background="{TemplateBinding Background}"
                        BorderThickness="0"
                        Height="6" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="VerticalScrollBar" TargetType="{x:Type ScrollBar}">
        <Track
            Name="PART_Track"
            IsDirectionReversed="true">
            <Track.DecreaseRepeatButton>
                <RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageUpCommand" />
            </Track.DecreaseRepeatButton>
            <Track.Thumb>
                <Thumb
                    Style="{StaticResource ScrollBarThumb}"
                    Margin="2,0,2,0"
                    Background="{DynamicResource DndRed}" />
            </Track.Thumb>
            <Track.IncreaseRepeatButton>
                <RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageDownCommand" />
            </Track.IncreaseRepeatButton>
        </Track>
    </ControlTemplate>

    <ControlTemplate x:Key="HorizontalScrollBar" TargetType="{x:Type ScrollBar}">
        <Track
            Name="PART_Track"
            IsDirectionReversed="False">
            <Track.DecreaseRepeatButton>
                <RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageLeftCommand" />
            </Track.DecreaseRepeatButton>
            <Track.Thumb>
                <Thumb
                    Style="{StaticResource ScrollBarThumbHor}"
                    Margin="0,2,0,2"
                    Background="{DynamicResource DndRed}" />
            </Track.Thumb>
            <Track.IncreaseRepeatButton>
                <RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageRightCommand" />
            </Track.IncreaseRepeatButton>
        </Track>
    </ControlTemplate>

    <Style x:Key="{x:Type ScrollBar}" TargetType="{x:Type ScrollBar}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="Width" Value="Auto" />
                <Setter Property="Height" Value="10" />
                <Setter Property="Template" Value="{StaticResource HorizontalScrollBar}" />
            </Trigger>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="Width" Value="10" />
                <Setter Property="Height" Value="Auto" />
                <Setter Property="Template" Value="{StaticResource VerticalScrollBar}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="FavsScrollViewer" TargetType="{x:Type ScrollViewer}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <ScrollContentPresenter Grid.Column="1" />
                        <ScrollBar
                            Grid.Row="0"
                            Grid.Column="0"
                            Name="PART_VerticalScrollBar"
                            Value="{TemplateBinding VerticalOffset}"
                            Maximum="{TemplateBinding ScrollableHeight}"
                            ViewportSize="{TemplateBinding ViewportHeight}"
                            Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" />
                        <ScrollBar
                            Name="PART_HorizontalScrollBar"
                            Orientation="Horizontal"
                            Grid.Row="1"
                            Grid.Column="1"
                            Value="{TemplateBinding HorizontalOffset}"
                            Maximum="{TemplateBinding ScrollableWidth}"
                            ViewportSize="{TemplateBinding ViewportWidth}"
                            Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ScrollViewer" TargetType="{x:Type ScrollViewer}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <ScrollContentPresenter Grid.Column="0" />
                        <ScrollBar
                            x:Name="PART_VerticalScrollBar"
                            Grid.Row="0"
                            Grid.Column="1"
                            Value="{TemplateBinding VerticalOffset}"
                            Maximum="{TemplateBinding ScrollableHeight}"
                            ViewportSize="{TemplateBinding ViewportHeight}"
                            Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" />
                        <ScrollBar
                            x:Name="PART_HorizontalScrollBar"
                            Orientation="Horizontal"
                            Grid.Row="1"
                            Grid.Column="0"
                            Value="{TemplateBinding HorizontalOffset}"
                            Maximum="{TemplateBinding ScrollableWidth}"
                            ViewportSize="{TemplateBinding ViewportWidth}"
                            Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!--Tab Styles-->
    <Style TargetType="TabItem">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TabItem">
                    <Grid>
                        <Border 
                                Name="Border"
                                Background="{TemplateBinding Background}" 
                                BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="1,1,1,1" 
                                Padding="4, 2">
                            <ContentPresenter 
                                    VerticalAlignment="Center" 
                                    HorizontalAlignment="Left" 
                                    ContentSource="Header"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                         <!--Trigger for when the TabItem is selected--> 
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="Border" Property="BorderThickness" Value="1,1,0,1" />
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource DndBeige}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DndRed}" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="White"/>
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DndRed}" />
                        </Trigger>
                         <!--Trigger for when the TabItem is hovered--> 
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource DndBeige}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DndRed}" />
                        </Trigger>
                         <!--Trigger for when the TabItem is disabled--> 
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Opacity" Value="0.5" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

     <!--TabControl Style--> 
    <Style TargetType="TabControl">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TabControl">
                    <Grid KeyboardNavigation.TabNavigation="Local">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                         <!--TabPanel for the TabItem headers--> 
                        <TabPanel 
                                Name="HeaderPanel" 
                                Grid.Column="0" 
                                Background="Transparent"
                                IsItemsHost="True" 
                                KeyboardNavigation.TabIndex="1"
                                KeyboardNavigation.TabNavigation="Once"
                                Panel.ZIndex="1"/>
                         <!--ContentPresenter for the selected TabItem's content-->
                        <Border
                            Grid.Column="1"
                            BorderBrush="{DynamicResource DndRed}"
                            BorderThickness="0, 1, 1, 1">
                            <ContentPresenter 
                                Name="ContentPanel" 
                                ContentSource="SelectedContent" 
                                Margin="0"
                                KeyboardNavigation.DirectionalNavigation="Contained"/>
                        </Border>

                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!--Colours-->
    <SolidColorBrush x:Key="DndRed" Color="#912316" />
    <SolidColorBrush x:Key="DndBeige" Color="#f3e9cf" />
    <SolidColorBrush x:Key="HighlighterYellow" Color="#f7bf2d" />
</ResourceDictionary>